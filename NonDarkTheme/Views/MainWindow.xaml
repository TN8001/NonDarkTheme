<metro:MetroWindow
  x:Class="NonDarkTheme.Views.MainWindow"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:mag="clr-namespace:MagnificationWPF;assembly=MagnificationWPF"
  xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
  xmlns:models="clr-namespace:NonDarkTheme.Models"
  xmlns:sys="clr-namespace:System;assembly=mscorlib"
  xmlns:utility="clr-namespace:NonDarkTheme.Utility"
  xmlns:viewModels="clr-namespace:NonDarkTheme.ViewModels"
  x:Name="metroWindow"
  Title="NonDarkTheme"
  Width="{Binding Settings.Window.Width, Mode=TwoWay}"
  Height="{Binding Settings.Window.Height, Mode=TwoWay}"
  d:DataContext="{d:DesignInstance {x:Type viewModels:MainViewModel}}"
  AllowsTransparency="True"
  Icon="/NonDarkTheme;component/Application.ico"
  IgnoreTaskbarOnMaximize="True"
  Left="{Binding Settings.Window.Left, Mode=TwoWay}"
  ResizeMode="CanResizeWithGrip"
  ShowIconOnTitleBar="True"
  TitleCaps="False"
  Top="{Binding Settings.Window.Top, Mode=TwoWay}"
  WindowStyle="None"
  mc:Ignorable="d">
  <!--
    Width="{Binding Settings.Window.Width, Mode=TwoWay}"
    Height="{Binding Settings.Window.Height, Mode=TwoWay}"
  -->

  <Window.DataContext>
    <viewModels:MainViewModel />
  </Window.DataContext>

  <metro:MetroWindow.Resources>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <utility:LessThanCollapsedConverter x:Key="LessThanCollapsedConverter" />

    <!--#region ツールバー表示非表示切り替え-->
    <Style x:Key="ExpanderStyle1" TargetType="{x:Type Expander}">
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type Expander}">
            <ContentPresenter
              x:Name="ExpandSite"
              MaxHeight="90"
              Margin="{TemplateBinding Padding}"
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
              Focusable="false">
              <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="ExpansionStates">
                  <VisualState x:Name="Expanded" />
                  <VisualState x:Name="Collapsed">
                    <Storyboard>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(FrameworkElement.MaxHeight)">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="0">
                          <EasingDoubleKeyFrame.EasingFunction>
                            <QuadraticEase EasingMode="EaseInOut" />
                          </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState>
                  <VisualStateGroup.Transitions>
                    <VisualTransition GeneratedDuration="0:0:0.5" From="Collapsed" />
                  </VisualStateGroup.Transitions>
                </VisualStateGroup>
              </VisualStateManager.VisualStateGroups>
            </ContentPresenter>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <!--#endregion-->

    <!--#region ツールバートグルボタン-->
    <Style x:Key="CheckBoxStyle1" TargetType="{x:Type CheckBox}">
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type CheckBox}">
            <ContentPresenter />
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <!--#endregion-->

    <!--#region ツールバーラジオボタン-->
    <Style x:Key="RadioButtonStyle1" TargetType="{x:Type RadioButton}">
      <Setter Property="MinWidth" Value="0" />
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type RadioButton}">
            <Grid>
              <AccessText Text="{TemplateBinding Tag}" />
              <Border x:Name="MouseOverBorder" Background="#19000000" />
              <Border x:Name="SelectedBackgroundBorder" Background="{DynamicResource MaterialDesignDivider}" />
              <materialDesign:Ripple
                Padding="10,4"
                VerticalContentAlignment="Center"
                Content="{TemplateBinding Content}"
                Feedback="{TemplateBinding Foreground}"
                Focusable="False"
                Opacity="0.56" />
            </Grid>
            <ControlTemplate.Triggers>
              <Trigger Property="IsMouseOver" Value="False">
                <Setter TargetName="MouseOverBorder" Property="Opacity" Value="0" />
              </Trigger>
              <Trigger Property="IsChecked" Value="False">
                <Setter TargetName="SelectedBackgroundBorder" Property="Opacity" Value="0" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <!--#endregion-->

    <!--#region ツールバーラジオボタングループ-->
    <Style x:Key="CardStyle1" TargetType="{x:Type materialDesign:Card}">
      <Setter Property="Margin" Value="2" />
      <Setter Property="VerticalAlignment" Value="Stretch" />
      <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth1" />
      <Setter Property="Background" Value="{DynamicResource MaterialDesignToolBarBackground}" />
    </Style>
    <!--#endregion-->

    <!--#region ツールバー反転タイプバッジ-->
    <Style x:Key="BadgedStyle1" TargetType="{x:Type materialDesign:Badged}">
      <Setter Property="BadgeColorZoneMode" Value="Standard" />
      <Setter Property="BadgePlacementMode" Value="BottomRight" />
    </Style>
    <!--#endregion-->
  </metro:MetroWindow.Resources>

  <metro:MetroWindow.RightWindowCommands>
    <metro:WindowCommands>
      <ToggleButton Content="Show_ToolBar" IsChecked="{Binding Settings.ShowToolBar}">
        <ToggleButton.Template>
          <ControlTemplate TargetType="{x:Type ToggleButton}">
            <metro:ContentControlEx
              x:Name="PART_ContentControlEx"
              Padding="{TemplateBinding Padding}"
              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
              Content="{TemplateBinding Content}"
              Opacity="0.6"
              RecognizesAccessKey="True" />
            <ControlTemplate.Triggers>
              <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="PART_ContentControlEx" Property="Content" Value="Hide_ToolBar" />
              </Trigger>
              <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="PART_ContentControlEx" Property="Opacity" Value="1" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </ToggleButton.Template>
      </ToggleButton>
      <Button
        x:Name="gitHubButton"
        Margin="0"
        utility:GitHubButtonBehavior.UpdateCheck="{Binding Settings.UpdateCheck}"
        utility:GitHubButtonBehavior.Url="https://github.com/TN8001/NonDarkTheme">
        <StackPanel Margin="5,0" Orientation="Horizontal">
          <materialDesign:PackIcon
            Width="20"
            Height="20"
            VerticalAlignment="Center"
            Kind="GithubCircle" />
          <ContentPresenter
            VerticalAlignment="Center"
            Content="_GitHub"
            RecognizesAccessKey="True"
            Visibility="{Binding ActualWidth, ConverterParameter=400, Converter={StaticResource LessThanCollapsedConverter}, ElementName=metroWindow, Mode=OneWay}" />
        </StackPanel>
      </Button>
    </metro:WindowCommands>
  </metro:MetroWindow.RightWindowCommands>


  <DockPanel>
    <Expander
      x:Name="expander"
      DockPanel.Dock="Top"
      IsExpanded="{Binding Settings.ShowToolBar}"
      Style="{DynamicResource ExpanderStyle1}">
      <ToolBarTray Height="45">
        <ToolBar ClipToBounds="False" Style="{DynamicResource MaterialDesignToolBar}">

          <materialDesign:Card Style="{StaticResource CardStyle1}">
            <StackPanel Orientation="Horizontal">
              <RadioButton
                IsChecked="{Binding Settings.ZOrder, Converter={StaticResource Enum2BooleanConverter}, ConverterParameter={x:Static mag:ZOrder.Nomal}}"
                Style="{DynamicResource RadioButtonStyle1}"
                ToolTip="何もしない">
                <materialDesign:PackIcon Kind="LayersOff" />
              </RadioButton>
              <RadioButton
                IsChecked="{Binding Settings.ZOrder, Converter={StaticResource Enum2BooleanConverter}, ConverterParameter={x:Static mag:ZOrder.Topmost}}"
                Style="{DynamicResource RadioButtonStyle1}"
                ToolTip="常に最前面">
                <materialDesign:PackIcon Kind="Layers" />
              </RadioButton>
              <RadioButton
                IsChecked="{Binding Settings.ZOrder, Converter={StaticResource Enum2BooleanConverter}, ConverterParameter={x:Static mag:ZOrder.SpecificTitle}}"
                Style="{DynamicResource RadioButtonStyle1}"
                ToolTip="特定タイトルのみ最前面">
                <materialDesign:PackIcon Kind="LayersOutline" />
              </RadioButton>
            </StackPanel>
          </materialDesign:Card>

          <Separator Margin="6" />

          <materialDesign:Card Style="{StaticResource CardStyle1}">
            <StackPanel Orientation="Horizontal">
              <RadioButton
                IsChecked="{Binding Settings.InvertType, Converter={StaticResource Enum2BooleanConverter}, ConverterParameter={x:Static models:InvertType.Identity}}"
                Style="{DynamicResource RadioButtonStyle1}"
                ToolTip="ノーマル">
                <materialDesign:PackIcon Kind="CardTextOutline" />
              </RadioButton>
              <RadioButton
                IsChecked="{Binding Settings.InvertType, Converter={StaticResource Enum2BooleanConverter}, ConverterParameter={x:Static models:InvertType.Invert}}"
                Style="{DynamicResource RadioButtonStyle1}"
                ToolTip="反転１">
                <materialDesign:Badged Badge="1" Style="{StaticResource BadgedStyle1}">
                  <materialDesign:PackIcon Kind="CardText" />
                </materialDesign:Badged>
              </RadioButton>
              <RadioButton
                IsChecked="{Binding Settings.InvertType, Converter={StaticResource Enum2BooleanConverter}, ConverterParameter={x:Static models:InvertType.Invert2}}"
                Style="{DynamicResource RadioButtonStyle1}"
                ToolTip="反転２">
                <materialDesign:Badged Badge="2" Style="{StaticResource BadgedStyle1}">
                  <materialDesign:PackIcon Kind="CardText" />
                </materialDesign:Badged>
              </RadioButton>
              <RadioButton
                IsChecked="{Binding Settings.InvertType, Converter={StaticResource Enum2BooleanConverter}, ConverterParameter={x:Static models:InvertType.Custom}}"
                Style="{DynamicResource RadioButtonStyle1}"
                ToolTip="カスタム">
                <materialDesign:Badged Badge="{materialDesign:PackIcon SettingsOutline}" Style="{StaticResource BadgedStyle1}">
                  <materialDesign:PackIcon Kind="CardText" />
                </materialDesign:Badged>
              </RadioButton>
            </StackPanel>
          </materialDesign:Card>

          <Separator Margin="6" />

          <Label VerticalAlignment="Center" Content="拡大率(%)" />
          <ComboBox Width="80" IsEditable="True">
            <ComboBox.ItemsSource>
              <x:Array Type="{x:Type sys:Int32}">
                <sys:Int32>50</sys:Int32>
                <sys:Int32>80</sys:Int32>
                <sys:Int32>100</sys:Int32>
                <sys:Int32>120</sys:Int32>
                <sys:Int32>150</sys:Int32>
                <sys:Int32>200</sys:Int32>
                <sys:Int32>400</sys:Int32>
              </x:Array>
            </ComboBox.ItemsSource>
            <ComboBox.Text>
              <Binding
                ElementName="invertView"
                Mode="TwoWay"
                Path="Scale"
                UpdateSourceTrigger="PropertyChanged">
                <Binding.ValidationRules>
                  <utility:NaturalNumberValidationRule ValidatesOnTargetUpdated="True" />
                </Binding.ValidationRules>
              </Binding>
            </ComboBox.Text>
            <ComboBox.ItemsPanel>
              <ItemsPanelTemplate>
                <VirtualizingStackPanel />
              </ItemsPanelTemplate>
            </ComboBox.ItemsPanel>
          </ComboBox>
          <Separator Margin="6" />
          <ListBox SelectionMode="Extended" Style="{StaticResource MaterialDesignToolToggleFlatListBox}">
            <ListBoxItem
              Padding="10"
              IsSelected="{Binding Settings.WindowOptions, Converter={StaticResource FlagsEnumValueConverter}, ConverterParameter={x:Static models:WindowOptions.Penetration}}"
              ToolTip="マウス操作を透過">
              <CheckBox IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" Style="{DynamicResource CheckBoxStyle1}">
                <materialDesign:PackIcon Kind="Mouse" />
              </CheckBox>
            </ListBoxItem>
            <ListBoxItem
              Padding="10"
              IsSelected="{Binding Settings.WindowOptions, Converter={StaticResource FlagsEnumValueConverter}, ConverterParameter={x:Static models:WindowOptions.ShowMagnifiedCursor}}"
              ToolTip="カーソルを表示">
              <CheckBox IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" Style="{DynamicResource CheckBoxStyle1}">
                <materialDesign:PackIcon Kind="CursorDefault" />
              </CheckBox>
            </ListBoxItem>
            <ListBoxItem
              Padding="10"
              IsSelected="{Binding Settings.WindowOptions, Converter={StaticResource FlagsEnumValueConverter}, ConverterParameter={x:Static models:WindowOptions.PinnedView}}"
              ToolTip="移動を同期しない">
              <CheckBox IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" Style="{DynamicResource CheckBoxStyle1}">
                <materialDesign:PackIcon Kind="Pin" />
              </CheckBox>
            </ListBoxItem>

          </ListBox>
          <Separator Margin="6" />
          <Button
            Padding="10"
            Click="ShowSettingsButton_Click"
            ToolTip="設定">
            <Grid>
              <AccessText Text="_O" />
              <materialDesign:PackIcon Kind="SettingsOutline" />
            </Grid>
          </Button>

        </ToolBar>
      </ToolBarTray>
    </Expander>
    <StatusBar DockPanel.Dock="Bottom">
      <StatusBarItem Margin="0,0,10,0" DockPanel.Dock="Right">
        <TextBlock Margin="5,0" Text="{Binding Fps, ElementName=invertView, StringFormat=Fps:{0:N1}}" />
      </StatusBarItem>
      <StatusBarItem DockPanel.Dock="Right">
        <TextBlock Margin="5,0" Text="{Binding SourceRect, ElementName=invertView, StringFormat=SourceRect:{0}}" />
      </StatusBarItem>
      <StatusBarItem>
        <TextBlock
          x:Name="text"
          Height="18"
          Margin="5,0"
          Text="{Binding ToolTip, ElementName=gitHubButton}" />
      </StatusBarItem>
    </StatusBar>
    <Border>
      <!--<mag:MagnifierHost
        x:Name="invertView"
        Margin="10"
        ColorEffect="{Binding Effect}"
        IsClickThrough="{Binding Settings.WindowOptions, Converter={StaticResource FlagsEnumValueConverter}, ConverterParameter={x:Static models:WindowOptions.Penetration}}"
        IsEnabled="{Binding IsChecked, ElementName=checkBox}"
        PinnedView="{Binding Settings.WindowOptions, Converter={StaticResource FlagsEnumValueConverter}, ConverterParameter={x:Static models:WindowOptions.PinnedView}}"
        ShowMagnifiedCursor="{Binding Settings.WindowOptions, Converter={StaticResource FlagsEnumValueConverter}, ConverterParameter={x:Static models:WindowOptions.ShowMagnifiedCursor}}"
        WindowX="{Binding Left, ElementName=metroWindow}"
        WindowY="{Binding Top, ElementName=metroWindow}" />-->
      <mag:AutoZOrderMagView
        x:Name="invertView"
        ColorEffect="{Binding Effect}"
        IsClickThrough="{Binding Settings.WindowOptions, Converter={StaticResource FlagsEnumValueConverter}, ConverterParameter={x:Static models:WindowOptions.Penetration}}"
        PinnedView="{Binding Settings.WindowOptions, Converter={StaticResource FlagsEnumValueConverter}, ConverterParameter={x:Static models:WindowOptions.PinnedView}}"
        ShowMagnifiedCursor="{Binding Settings.WindowOptions, Converter={StaticResource FlagsEnumValueConverter}, ConverterParameter={x:Static models:WindowOptions.ShowMagnifiedCursor}}"
        Titles="{Binding Settings.Titles}"
        WindowX="{Binding Left, ElementName=metroWindow}"
        WindowY="{Binding Top, ElementName=metroWindow}"
        ZOrder="{Binding Settings.ZOrder}" />
    </Border>
  </DockPanel>
</metro:MetroWindow>
